#lang racket/base

; Signature: last-item (lst)
; Type: List (T1) -> T1
; Purpose: returns the last item in the list
; Pre-conditions: lst not empty
; Tests: 
; (last-item '(1 2 3)) => 3
; (last-item '(42)) => 42
(define last-item
    (lambda (lst)
    (if (null? (cdr lst))
      (car lst)
      (last-item (cdr lst)))

))

; Signature: remove-last-item (lst)
; Type: List (T1) -> List (T1)
; Purpose: returns the list without the last item
; Pre-conditions: lst not empty
; Tests:
; (last-item '(1 2 3)) => (1 2)
; (last-item '(42)) => ()
(define remove-last-item
    (lambda (lst)
        (if (null? (cdr (cdr lst))) 
            (list (car lst))        
            (cons (car lst) (remove-last-item (cdr lst)))) 
))

; Signature: rotate-nth (lst n)
; Type: List (T1), Number -> List (T1)
; Purpose: rotates the list n times to the right
; Pre-conditions: lst is a non-empty list, n is a non-negative integer
; Tests:
; (rotate-nth '(1 2 3) 1) => (3 1 2)
; (rotate-nth '(1 2 3) 2) => (2 3 1)
; (rotate-nth '(1 2 3) 3) => (1 2 3)

(define rotate-nth
  (lambda (lst n)
    (if (= n 0)
        lst
        (rotate-nth
          (cons (last-item lst) (remove-last-item lst))
          (- n 1)))))
